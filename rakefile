require 'rubygems'
require 'bundler'

system "bundle install --system"

require 'rake/clean'
require 'albacore'

include FileTest
include FileUtils

output_path = "./build"
source_root = "./src"
samples_root = "./samples"
test_root = "./tests"
tools_root = "./tools"
lib_root = "./lib"
packages_root = "#{source_root}/Packages"
nuget_exe = "#{tools_root}/nuget/nuget.exe"

project_url = 'https://github.com/davidalpert/ConfigurableAppSettings'

CLEAN.include("#{source_root}/**/bin", "#{source_root}/**/obj", "#{test_root}/**/obj", "#{test_root}/**/bin")

CLOBBER.include("./**/_*", "./**/*.user", "./**/*.cache", "./**/*.suo", "TestResult.xml")

commit = Git.open(".").log.first.sha[0..10] rescue 'na'
solution_file = FileList["#{source_root}/*.sln"].first

# ---------------------------------------------------------------------------------------------------------
# and so begin the build script tasks/targets

desc 'Default: run a clean build'
task :default => ["clean", "build"]

namespace :setup do
	desc "Setup dependencies for nuget packages"
	task :dep do
		FileList["**/packages.config"].each do |file|
			sh "#{nuget_exe} install #{file} /OutputDirectory #{packages_root}"
		end
	end
end

task :build => ["build:all"]
namespace :build do

	desc "Build the project"
	msbuild :all, [:config] => ["setup:dep"] do |msb, args|
		configuration = args[:config] || :Debug

		puts configuration

		msb.properties :configuration => configuration
		msb.targets :Clean, :Build
		msb.solution = solution_file
	end
end

task :publish => ["deploy:publish"]
task :deploy => ["deploy:publish"]
namespace :deploy do

	desc "Publish nuspec package"
	task :publish do |t, args|

		# make sure we have a clean output folder
		Rake::Task["util:clean_folder"].invoke(output_path)

		# for each project file...
		FileList["{#{source_root},#{samples_root}}/**/*.csproj"].each do |proj_file|

			proj_directory = File.dirname(proj_file)

			Rake::Task["deploy:ensure_nuspec_file_exists"].reenable
			Rake::Task["deploy:ensure_nuspec_file_exists"].invoke(proj_file) unless FileList["#{proj_directory}/*.nuspec"].to_a.length > 0

			Rake::Task["deploy:package_proj_file"].reenable
			Rake::Task["deploy:package_proj_file"].invoke(proj_file) 
		end
	end

	task :ensure_nuspec_file_exists, [:proj_file] do | cmd, args |
		package_id = File.basename(args.proj_file, '.csproj')

		Rake::Task["deploy:spec"].reenable
		Rake::Task["deploy:spec"].invoke(package_id, "0.0.0.0")
	end

	exec :package_proj_file, [:proj_file] do | cmd, args |
		package_id = File.basename(args.proj_file, '.csproj')

		puts '----------------------------------'
		puts "Packing: #{package_id}"
		puts 

		cmd.working_directory = output_path
		cmd.command = nuget_exe
		cmd.parameters 'pack', File.expand_path(args.proj_file)
	end

	nuspec :spec, [:package_id, :version]  do |t, args|
		t.id = args.package_id
		t.version = args.version
		t.authors = authors_txt
		t.description = description_txt
		t.summary = summary_txt
		t.language = "en-US"
		t.working_directory = "#{output_path}"
		t.output_file = "#{args.package_id}.#{args.version}.nuspec"
	end

end

namespace :util do

	# removes and recreate the given folder
	task :clean_folder, :folder do |t, args|
		rm_rf(args.folder) if File.directory?(args.folder)
		Dir.mkdir(args.folder) unless File.directory? args.folder
	end

	# removes those .orig files that get left behind by git merges
	task :rm_orig do
		FileList["./**/*.orig"].each { |f| rm f }
	end

	# gets the svn version
	def svn_version
		version_range = `./tools/svn/svnversion`.match('(\d+)(?::(\d+))?') rescue [-1]
		version_range[2] || version_range[1] || ENV["BUILD_VCS_NUMBER"]
	end
end

